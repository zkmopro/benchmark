namespace mopro {
  u32 add(u32 a, u32 b);
  string hello();

  [Throws=MoproError]
  void initialize_mopro();

  [Throws=MoproError]
  void initialize_mopro_dylib(string dylib_path);

  [Throws=MoproError]
  sequence<string> full_prove(record<string, sequence<string>> circuit_inputs);

  [Throws=MoproError]
  GenerateProofResult generate_proof2(record<string, sequence<string>> circuit_inputs);

  [Throws=MoproError]
  boolean verify_proof2(bytes proof, bytes public_input);

  [Throws=MoproError]
  BenchmarkResult arkworks_pippenger(u32 instance_size, u32 num_instance, [ByRef] string utils_dir);
  
  [Throws=MoproError]
  BenchmarkResult trapdoortech_zprize_msm(u32 instance_size, u32 num_instance, [ByRef] string utils_dir);

  ProofCalldata to_ethereum_proof(bytes proof);
  sequence<string> to_ethereum_inputs(bytes inputs);
};

dictionary GenerateProofResult {
  bytes proof;
  bytes inputs;
};

dictionary BenchmarkResult {
  u32 instance_size;
  u32 num_instance;
  double avg_processing_time;
};

dictionary G1 {
  string x;
  string y;
};

dictionary G2 {
  sequence<string> x;
  sequence<string> y;
};

dictionary ProofCalldata {
  G1 a;
  G2 b;
  G1 c;
};


[Error]
enum MoproError {
  "CircomError",
};

interface MoproCircom {
  constructor();

  [Throws=MoproError]
  void initialize(string zkey_path, string wasm_path);

  [Throws=MoproError]
  GenerateProofResult generate_proof(record<string, sequence<string>> circuit_inputs);

  [Throws=MoproError]
  boolean verify_proof(bytes proof, bytes public_input);
};
